generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id             Int           @id @default(autoincrement())
  content        String
  role           String
  sender         String
  avatarSource   String
  conversationId Int?
  starred        Boolean?      @default(false)
  fans           User[]        @relation("MessageFans")
  createdAt      DateTime?     @default(now())
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Conversation {
  id           Int       @id @default(autoincrement())
  name         String?
  isPublic     Boolean   @default(false)
  messages     Message[]
  creator      User      @relation("conversation_creator", fields: [creatorId], references: [id])
  creatorId    Int
  owner        User      @relation("conversation_owner", fields: [ownerId], references: [id])
  ownerId      Int
  participants User[]    @relation("ConversationParticipants")

  @@unique(fields: [id, ownerId], name: "ownedConversation")
}

model Feature {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  starred     Boolean @default(false)
}

model Task {
  id       Int     @id @default(autoincrement())
  name     String
  complete Boolean @default(false)
}

model User {
  id                   Int            @id @default(autoincrement())
  username             String         @unique
  password             String
  avatarSource         String?
  includeTaskFeature   Boolean        @default(false)
  todoistApiKey        String?
  activeTaskId         String?
  useGPT4              Boolean        @default(false)
  gpt4ApiKey           String?
  sessions             Session[]
  conversations        Conversation[] @relation("ConversationParticipants")
  ownedConversations   Conversation[] @relation("conversation_owner")
  createdConversations Conversation[] @relation("conversation_creator")
  starredMessages      Message[]      @relation("MessageFans")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  // accessToken  String?
  expires      DateTime
  createdAt    DateTime
  updatedAt    DateTime
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
}

// model ConversationParticipant {
//   conversationId Int
//   userId         Int
//   role           String
//   user           User @relation(fields: [userId], references: [id])
//   conversation   Conversation @relation(fields: [conversationId], references: [id])
//   @@id([conversationId, userId])
// }
